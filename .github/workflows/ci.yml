# CI/CD Pipeline Configuration 
name: CI/CD Pipeline

# Workflow triggers
# Runs on push to main branch and pull requests
on:
  push:
    branches: [ main ]  # Trigger on main branch updates
  pull_request:
    branches: [ main ]  # Trigger on PRs to main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1  # AWS Academy typically uses us-east-1
  ECR_REPOSITORY: student-management-app
  ECS_SERVICE: student-management-service
  ECS_CLUSTER: nci-student-app
  CONTAINER_NAME: student-app

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      CI: true
      RAILS_ENV: test

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y google-chrome-stable curl libjemalloc2 libvips sqlite3

      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'
          bundler-cache: true
      
      - name: Set correct permissions
        run: |
          chmod +x bin/rails
          chmod +x bin/bundle
      
      - name: Prepare test database
        env:
          RAILS_ENV: test
        run: |
          bundle exec rails db:test:prepare
          bundle exec rails db:schema:load

      - name: Start Rails server
        env:
          RAILS_ENV: test
        run: |
          bundle exec rails server -e test -b 0.0.0.0 &
          sleep 5
      
      - name: Run tests
        env:
          RAILS_ENV: test
        run: bundle exec rails test test:system

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots

      - name: Complete job
        run: echo "Test job completed successfully"

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      CI: true
      RAILS_ENV: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug SSH key
        run: |
          echo "Length of SSH key: ${#SSH_PRIVATE_KEY}"
          echo "First few characters: ${SSH_PRIVATE_KEY:0:50}..."
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}

      - name: Set up SSH Key
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          
          # Debug SSH setup
          ls -la ~/.ssh
          echo "SSH directory permissions:"
          ls -la ~/.ssh/id_rsa
          echo "Testing SSH key format:"
          ssh-keygen -l -f ~/.ssh/id_rsa || echo "Invalid key format"

      - name: Test SSH Connection
        run: |
          ssh -v -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} "echo Connected Successfully!"

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            
            # Update system packages
            sudo apt-get update -y
            sudo apt-get install -y ruby-dev build-essential libssl-dev zlib1g-dev

            # Navigate to app directory
            cd /home/ubuntu/app

            # Ensure proper ownership
            sudo chown -R ubuntu:ubuntu /home/ubuntu/app

            # Clean up existing bundle
            sudo rm -rf vendor/bundle

            # Pull latest changes
            git pull origin main

            # Set correct permissions
            chmod +x bin/rails
            chmod +x bin/bundle

            # Install dependencies
            bundle install --jobs=4

            # Stop any running servers
            sudo systemctl stop puma || true
            pkill -f puma || true

            # Run migrations
            RAILS_ENV=production bundle exec rails db:migrate

            # Start the server
            sudo systemctl start puma
            
            echo "Deployment Complete!"
          EOF

      - name: Verify Deployment
        run: |
          echo "Verifying deployment..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} "systemctl status puma"

      - name: Complete job
        run: echo "Deploy job completed successfully"
