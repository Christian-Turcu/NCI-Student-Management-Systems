# CI/CD Pipeline Configuration 
name: CI/CD Pipeline

# Workflow triggers
# Runs on push to main branch and pull requests
on:
  push:
    branches: [ main ]  # Trigger on main branch updates
  pull_request:
    branches: [ main ]  # Trigger on PRs to main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: student-management-app
  ECS_SERVICE: student-management-service
  ECS_CLUSTER: nci-student-app
  CONTAINER_NAME: student-app

jobs:
  #Implements automated testing 
  test:
    runs-on: ubuntu-latest  # Use Ubuntu runner
    env:
      CI: true
      RAILS_ENV: test

    steps:
    # Checks out repository code
    - uses: actions/checkout@v3
    
    # Sets up Ruby environment
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2.2'  # Ruby version
        bundler-cache: true    # Cache dependencies
    
    # Install Chrome
    - name: Install Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    # Configure Bundler
    - name: Configure Bundler
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3
    
    # Runs the unit and integration tests
    - name: Run tests
      run: |
        bundle exec rails test:system
      env:
        RAILS_ENV: test
        CI: true

    # Setup SSH Debug
    - name: Setup SSH Debug
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/debug_key
        chmod 600 ~/.ssh/debug_key
        echo "=== SSH Key Info ==="
        ssh-keygen -l -f ~/.ssh/debug_key || echo "Invalid key format"
        echo "=== Key Format Check ==="
        head -n 1 ~/.ssh/debug_key
        echo "=== Converting key to OpenSSH format ==="
        ssh-keygen -p -N "" -m PEM -f ~/.ssh/debug_key
        rm ~/.ssh/debug_key

    # Install SSH key
    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    # Add host key
    - name: Add host key
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts
        echo "=== Testing SSH connection ==="
        ssh -vvv ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful' && ls -la ~/.ssh/"

    # Deploy using SSH
    - name: Deploy using SSH
      if: success()
      run: |
        echo "Starting deployment..."
        rsync -avz \
          --exclude '.git' \
          --exclude 'node_modules' \
          --exclude 'tmp' \
          ./ ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/app/
        
        ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
          "cd /home/${{ secrets.EC2_USERNAME }}/app && \
           chmod +x setup-ec2.sh setup-security-group.sh && \
           ./setup-security-group.sh && \
           ./setup-ec2.sh"

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Copy setup script to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "setup-ec2.sh"
        target: "/home/ubuntu"

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          chmod +x ~/setup-ec2.sh
          ~/setup-ec2.sh
