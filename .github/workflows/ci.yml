name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH Key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > myKey.pem
          chmod 600 myKey.pem

      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -i myKey.pem ubuntu@${{ secrets.EC2_ELASTIC_IP }} "echo Connected Successfully!"

      - name: Deploy to EC2
        env:
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: |
          ssh -o StrictHostKeyChecking=no -i myKey.pem ubuntu@${{ secrets.EC2_ELASTIC_IP }} << EOF
            set -e
            set -x  # Enable command echo
            
            # Update system packages and install required dependencies
            sudo apt-get update -y
            sudo apt-get install -y ruby-dev build-essential libssl-dev zlib1g-dev git curl

            # Create app directory if it doesn't exist
            sudo mkdir -p /home/ubuntu/app
            cd /home/ubuntu/app

            # Ensure proper ownership
            sudo chown -R ubuntu:ubuntu /home/ubuntu/app

            # Clone repository if it doesn't exist, otherwise pull latest changes
            if [ ! -d ".git" ]; then
              git clone https://github.com/Christian-Turcu/NCI-Student-Management-Systems.git .
            else
              git pull origin main
            fi

            # Set up Rails environment
            export RAILS_ENV=production
            export PORT=3000
            export RAILS_MASTER_KEY='$RAILS_MASTER_KEY'
            echo "RAILS_MASTER_KEY length: \${#RAILS_MASTER_KEY}"

            # Install Bundler
            sudo gem install bundler -v 2.5.23

            # Install gems
            bundle config set --local deployment 'true'
            bundle config set --local without 'development test'
            bundle install --quiet

            # Ensure directories exist
            mkdir -p config
            mkdir -p tmp/pids
            mkdir -p log

            # Set up master key (ensure it's exactly 32 characters)
            echo -n '$RAILS_MASTER_KEY' > config/master.key
            chmod 600 config/master.key

            # Verify master key length
            echo "Master key file length: \$(wc -c < config/master.key)"
            echo "Master key file contents (first character): \$(head -c 1 config/master.key)"

            # Create credentials.yml.enc if it doesn't exist
            if [ ! -f config/credentials.yml.enc ]; then
              EDITOR=true bundle exec rails credentials:edit
            fi

            # Database setup with explicit key
            bundle exec rails db:migrate RAILS_ENV=production

            # Precompile assets with explicit key
            bundle exec rails assets:precompile RAILS_ENV=production

            # Kill any existing Rails server and remove old pid file
            pkill -f "rails server" || true
            rm -f tmp/pids/server.pid || true

            echo "Starting Rails server..."
            
            # Start the server with explicit environment variables
            bundle exec rails server -d -b 0.0.0.0 -p 3000

            # Wait for server to start
            sleep 10
            
            # Verify server is running
            if ps aux | grep "[r]ails server" > /dev/null; then
              echo "Rails server is running"
              echo "Process details:"
              ps aux | grep "[r]ails"
              echo "Checking local connection..."
              if curl -s http://localhost:3000 > /dev/null; then
                echo "Server is responding locally"
                echo "Response from server:"
                curl -v http://localhost:3000
              else
                echo "Server is not responding locally"
                echo "Last 50 lines of log:"
                tail -n 50 log/production.log
              fi
            else
              echo "Rails server failed to start"
              echo "Last 50 lines of log:"
              tail -n 50 log/production.log
            fi

            echo "Deployment Complete!"
EOF

      - name: Verify Server
        run: |
          echo "Waiting for server to be ready..."
          sleep 15
          echo "Attempting to connect to server..."
          curl -v http://${{ secrets.EC2_ELASTIC_IP }}:3000/ || true

      - name: Clean up
        run: |
          rm -f myKey.pem
