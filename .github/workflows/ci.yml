# CI/CD Pipeline Configuration 
name: CI/CD Pipeline

# Workflow triggers
# Runs on push to main branch and pull requests
on:
  push:
    branches: [ main ]  # Trigger on main branch updates
  pull_request:
    branches: [ main ]  # Trigger on PRs to main

jobs:
  #Implements automated testing 
  test:
    runs-on: ubuntu-latest  # Use Ubuntu runner

    steps:
    # Checks out repository code
    - uses: actions/checkout@v2
    
    # Sets up Ruby environment
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2.2'  # Ruby version
        bundler-cache: true    # Cache dependencies
    
    # Configure Bundler
    - name: Configure Bundler
      run: |
        bundle config unset deployment
        bundle config set --local without 'production'
    
    # Installs the project dependencies
    - name: Install dependencies
      run: |
        gem install bundler
        bundle install
    
    # Runs the unit and integration tests
    - name: Run tests
      run: |
        bundle exec rails test
        
    # Runs system tests
    - name: Run system tests
      run: |
        bundle exec rails test:system

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: nci-student-management
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Update ECS service
      run: |
        aws ecs update-service --cluster nci-student-app --service student-management-service --force-new-deployment
