# CI/CD Pipeline Configuration 
name: CI/CD Pipeline

# Workflow triggers
# Runs on push to main branch and pull requests
on:
  push:
    branches: [ main ]  # Trigger on main branch updates
  pull_request:
    branches: [ main ]  # Trigger on PRs to main

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: student-management-app
  ECS_SERVICE: student-management-service
  ECS_CLUSTER: nci-student-app
  CONTAINER_NAME: student-app

jobs:
  #Implements automated testing 
  test:
    runs-on: ubuntu-latest  # Use Ubuntu runner

    services:
      selenium:
        image: selenium/standalone-chrome:latest
        ports:
          - 4444:4444
        options: --shm-size="2g"

    steps:
    # Checks out repository code
    - uses: actions/checkout@v3
    
    # Sets up Ruby environment
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2.2'  # Ruby version
        bundler-cache: true    # Cache dependencies
    
    # Configure Bundler
    - name: Configure Bundler
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3
    
    # Installs the project dependencies
    - name: Install dependencies
      run: |
        gem install bundler
        bundle install
    
    # Runs the unit and integration tests
    - name: Run tests
      run: |
        bundle exec rails test
        
    # Runs system tests
    - name: Run system tests
      run: |
        bundle exec rails test:system
      env:
        RAILS_ENV: test
        SELENIUM_REMOTE_URL: http://localhost:4444/wd/hub

    # Set up AWS credentials
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    # Copy files to EC2
    - name: Copy files to EC2
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
        chmod 600 ec2_key.pem
        scp -o StrictHostKeyChecking=no -i ec2_key.pem setup-ec2.sh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/
        scp -o StrictHostKeyChecking=no -i ec2_key.pem setup-security-group.sh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "chmod +x ~/setup-ec2.sh ~/setup-security-group.sh"
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "~/setup-security-group.sh"
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "~/setup-ec2.sh"

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_region: ${{ env.AWS_REGION }}

    - name: Configure Security Group
      run: |
        chmod +x ./setup-security-group.sh
        ./setup-security-group.sh

    - name: Copy setup script to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "setup-ec2.sh"
        target: "/home/ubuntu"

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          chmod +x ~/setup-ec2.sh
          ~/setup-ec2.sh
